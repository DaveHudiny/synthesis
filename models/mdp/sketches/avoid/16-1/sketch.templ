mdp

const int N=16;
const int xMIN = 1;
const int yMIN = 1;
const int xMAX = N;
const int yMAX = N;

hole int o1y in {1..16};
hole int o1x_init in {1..16};
hole int goright1_init in {0,1};

const NUM_OBS = 1;
formula crash = visit1;
formula goal = (x=xMAX & y=yMAX);
formula done = goal | crash;


formula clk_next = mod(clk+1,2*NUM_OBS+1);
module clk
    clk : [-1..2*NUM_OBS] init -1;

    [place] !done & clk=-1 -> (clk'=clk_next);

    [left]  !done & clk=0 -> (clk'=clk_next);
    [right] !done & clk=0 -> (clk'=clk_next);
    [down]  !done & clk=0 -> (clk'=clk_next);
    [up]    !done & clk=0 -> (clk'=clk_next);
    [wait]  !done & clk=0 -> (clk'=clk_next);

    [o1]      !done & clk=1 -> (clk'=clk_next);
    [detect1] !done & clk=2 -> (clk'=clk_next);
endmodule


const double slip = 0.2;

formula xright  = min(x+1,xMAX);
formula xleft   = max(x-1,xMIN);
formula yup     = min(y+1,yMAX);
formula ydown   = max(y-1,yMIN);

module agent
    x : [xMIN..xMAX] init xMIN;
    y : [yMIN..yMAX] init yMIN;

    [left]  true -> 1-slip : (x'=xleft)  + slip : true;
    [right] true -> 1-slip : (x'=xright) + slip : true;
    [down]  true -> 1-slip : (y'=ydown)  + slip : true;
    [up]    true -> 1-slip : (y'=yup)    + slip : true;
    [wait]  true -> true;
endmodule


formula at1 = (x=o1x & y=o1y);

module obstacle1
    o1x : [xMIN..xMAX] init xMIN;
    goright1 : bool init true;

    [place] true -> (o1x'=o1x_init) & (goright1'=goright1_init=1);

    [o1]  goright1 & o1x < o1x_init_MAX -> 1/2: (o1x'=min(o1x+1,o1x_init_MAX)) + 1/2: true;
    [o1]  goright1 & o1x = o1x_init_MAX -> (goright1'=false);

    [o1] !goright1 & o1x > o1x_init_MIN -> 1/2: (o1x'=max(o1x-1,o1x_init_MIN)) + 1/2: true;
    [o1] !goright1 & o1x = o1x_init_MIN -> (goright1'=true);
endmodule

module visit1
    visit1 : bool init false;
    [detect1] true -> (visit1'=at1);
endmodule

