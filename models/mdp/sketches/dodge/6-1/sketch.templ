mdp

const int N=6;
const int xMIN = 1;
const int yMIN = 1;
const int xMAX = N;
const int yMAX = N;

hole int x1_init in {1..6};
hole int y1_init in {2..5};

hole int a1_xeve_yeve in {0,1,2};
hole int a1_xeve_yodd in {0,1,2};
hole int a1_xodd_yodd in {0,1,2};
hole int a1_xodd_yeve in {0,1,2};

formula at1 = (x=x1 & y=y1);


//hole int x2_init in {1..6};
//hole int y2_init in {4..5};

// hole int a2_xeve_yeve in {0,1,2};
// hole int a2_xeve_yodd in {0,1,2};
// hole int a2_xodd_yodd in {0,1,2};
// hole int a2_xodd_yeve in {0,1,2};

//formula at2 = (x=x2 & y=y2);


formula crash = at1;
//formula crash = at1 | at2;
formula goal = (x=xMAX & y=yMAX);
formula done = goal | crash;


formula clk_next = mod(clk+1,2);
module clk
    clk : [-1..1] init -1;

    [place] !done & clk=-1 -> (clk'=clk_next);

    [left]  !done & clk=0 -> (clk'=clk_next);
    [right] !done & clk=0 -> (clk'=clk_next);
    [down]  !done & clk=0 -> (clk'=clk_next);
    [up]    !done & clk=0 -> (clk'=clk_next);
    [wait]  !done & clk=0 -> (clk'=clk_next);

    [o]     !done & clk=1 -> (clk'=clk_next);
endmodule


const double slip = 0.2;

formula xright  = min(x+1,xMAX);
formula xleft   = max(x-1,xMIN);
formula yup     = min(y+1,yMAX);
formula ydown   = max(y-1,yMIN);

module agent
    x : [xMIN..xMAX] init xMIN;
    y : [yMIN..yMAX] init yMIN;

    [left]  true -> 1-slip : (x'=xleft)  + slip : true;
    [right] true -> 1-slip : (x'=xright) + slip : true;
    [down]  true -> 1-slip : (y'=ydown)  + slip : true;
    [up]    true -> 1-slip : (y'=yup)    + slip : true;
    //[wait]  true -> true;
endmodule


formula x1right  = min(x1+1,x1_init_MAX);
formula x1left   = max(x1-1,x1_init_MIN);
formula y1up     = min(y1+1,y1_init_MAX);
formula y1down   = max(y1-1,y1_init_MIN);

// formula x2right  = min(x2+1,x2_init_MAX);
// formula x2left   = max(x2-1,x2_init_MIN);
// formula y2up     = min(y2+1,y2_init_MAX);
// formula y2down   = max(y2-1,y2_init_MIN);

module obstacle1
    x1 : [xMIN..xMAX] init xMAX;
    y1 : [yMIN..yMAX] init yMAX;

    [place] true -> (x1'=x1_init) & (y1'=y1_init);

    [o]  mod(x1,2)=0 & mod(y1,2)=0 & a1_xeve_yeve=0 -> 1/2 : (x1'=x1right) + 1/2 : true;
    [o]  mod(x1,2)=0 & mod(y1,2)=0 & a1_xeve_yeve=1 -> 1/2 : (x1'=x1left)  + 1/2 : true;
    [o]  mod(x1,2)=0 & mod(y1,2)=0 & a1_xeve_yeve=2 -> 1/2 : (y1'=y1up)    + 1/2 : true;
    [o]  mod(x1,2)=0 & mod(y1,2)=0 & a1_xeve_yeve=3 -> 1/2 : (y1'=y1down)  + 1/2 : true;
    [o]  mod(x1,2)=0 & mod(y1,2)=0 & a1_xeve_yeve=4 -> 1: true;

    [o]  mod(x1,2)=0 & mod(y1,2)=1 & a1_xeve_yodd=0 -> 1/2 : (x1'=x1right) + 1/2 : true;
    [o]  mod(x1,2)=0 & mod(y1,2)=1 & a1_xeve_yodd=1 -> 1/2 : (x1'=x1left)  + 1/2 : true;
    [o]  mod(x1,2)=0 & mod(y1,2)=1 & a1_xeve_yodd=2 -> 1/2 : (y1'=y1up)    + 1/2 : true;
    [o]  mod(x1,2)=0 & mod(y1,2)=1 & a1_xeve_yodd=3 -> 1/2 : (y1'=y1down)  + 1/2 : true;
    [o]  mod(x1,2)=0 & mod(y1,2)=1 & a1_xeve_yodd=4 -> 1: true;

    [o]  mod(x1,2)=1 & mod(y1,2)=0 & a1_xodd_yeve=0 -> 1/2 : (x1'=x1right) + 1/2 : true;
    [o]  mod(x1,2)=1 & mod(y1,2)=0 & a1_xodd_yeve=1 -> 1/2 : (x1'=x1left)  + 1/2 : true;
    [o]  mod(x1,2)=1 & mod(y1,2)=0 & a1_xodd_yeve=2 -> 1/2 : (y1'=y1up)    + 1/2 : true;
    [o]  mod(x1,2)=1 & mod(y1,2)=0 & a1_xodd_yeve=3 -> 1/2 : (y1'=y1down)  + 1/2 : true;
    [o]  mod(x1,2)=1 & mod(y1,2)=0 & a1_xodd_yeve=4 -> 1: true;

    [o]  mod(x1,2)=1 & mod(y1,2)=1 & a1_xodd_yodd=0 -> 1/2 : (x1'=x1right) + 1/2 : true;
    [o]  mod(x1,2)=1 & mod(y1,2)=1 & a1_xodd_yodd=1 -> 1/2 : (x1'=x1left)  + 1/2 : true;
    [o]  mod(x1,2)=1 & mod(y1,2)=1 & a1_xodd_yodd=2 -> 1/2 : (y1'=y1up)    + 1/2 : true;
    [o]  mod(x1,2)=1 & mod(y1,2)=1 & a1_xodd_yodd=3 -> 1/2 : (y1'=y1down)  + 1/2 : true;
    [o]  mod(x1,2)=1 & mod(y1,2)=1 & a1_xodd_yodd=4 -> 1: true;

endmodule

// module obstacle2=obstacle1[x1=x2,y1=y2,x1_init=x2_init,y1_init=y2_init,x1right=x2right,x1left=x2left,y1up=y2up,y1down=y2down,a1_xeve_yeve=a2_xeve_yeve,a1_xeve_yodd=a2_xeve_yodd,a1_xodd_yodd=a2_xodd_yodd,a1_xodd_yeve=a2_xodd_yeve] endmodule