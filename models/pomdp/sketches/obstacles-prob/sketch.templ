pomdp

// grid dimensions
const int N = 10;
const int xMIN = 0;
const int yMIN = 0;
const int xMAX = N-1;
const int yMAX = N-1;

// obstacle coordinates
hole int o1x in {3,4,5};
hole int o1y in {3,4,5};

hole int o2x in {6,7,8};
hole int o2y in {6,7,8};

formula near1 = 3<=x & x<=5 & 3<=y & y<=5;
formula near2 = 6<=x & x<=8 & 6<=y & y<=8;
//formula near3 = 1<=x & x<=3 & 3<=y & y<=4;
//formula near4 = 3<=x & x<=4 & 1<=y & y<=3;

formula at1 = (x = o1x & y = o1y);
formula at2 = (x = o2x & y = o2y);
//formula at3 = (x = o3x & y = o3y);
//formula at4 = (x = o4x & y = o4y);

const NUM_OBS = 2;
formula crash = crash1 | crash2;
formula goal = (x=xMAX & y=yMAX);
formula done = goal | crash;


// observations
observable "clk" = clk;
observable "goal" = goal;
observable "crash" = crash;
observable "x_small" = x<xMAX/2;
observable "y_small" = y<yMAX/2;

formula clk_next = mod(clk+1,NUM_OBS+1);
module clk
    clk : [-1..NUM_OBS] init -1;

    [place] clk=-1 -> (clk'=clk_next);

    [east]  !done & clk=0 -> (clk'=clk_next);
    [west]  !done & clk=0 -> (clk'=clk_next);
    [north] !done & clk=0 -> (clk'=clk_next);
    [south] !done & clk=0 -> (clk'=clk_next);
    
    [detect1] !done & clk=1 -> (clk'=clk_next);
    [detect2] !done & clk=2 -> (clk'=clk_next);
    [detect3] !done & clk=3 -> (clk'=clk_next);
    [detect4] !done & clk=4 -> (clk'=clk_next);
endmodule


// probability of slipping 2 cells ahead
const double slip = 0.1;

// moving around the grid
module agent
    x : [xMIN..xMAX];
    y : [yMIN..yMAX];

    [place] true ->  1/4: (x'=o1x-1) & (y'=o1y) + 1/4: (x'=1) & (y'=1) + 1/4: (x'=2) & (y'=1) + 1/4: (x'=1) & (y'=3);

    [west]  true -> (1-slip): (x'=max(x-1,xMIN)) + slip: (x'=max(x-2,xMIN));
    [east]  true -> (1-slip): (x'=min(x+1,xMAX)) + slip: (x'=min(x+2,xMAX));
    [south] true -> (1-slip): (y'=min(y+1,yMAX)) + slip: (y'=min(y+2,yMAX));
    [north] true -> (1-slip): (y'=max(y-1,yMIN)) + slip: (y'=max(y-2,yMIN));
endmodule

// crash detection
module crash1
    crash1 : bool init false;
    [detect1]  near1 -> (crash1'=at1);
    [detect1] !near1 -> true;
endmodule

module crash2=crash1[crash1=crash2,detect1=detect2,near1=near2,at1=at2] endmodule
//module crash3=crash1[crash1=crash3,detect1=detect3,near1=near3,at1=at3] endmodule
//module crash4=crash1[crash1=crash4,detect1=detect4,near1=near4,at1=at4] endmodule
